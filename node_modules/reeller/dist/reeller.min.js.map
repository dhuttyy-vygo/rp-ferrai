{"version":3,"file":"reeller.min.js","sources":["../src/module/Base.js","../src/module/Filler.js","../src/module/Reeller.js","../src/plugin/ScrollerPlugin.js"],"sourcesContent":["export default class Base {\n    /**\n     * Base class.\n     */\n    constructor() {\n        this.events = {};\n    }\n\n    /**\n     * Attach an event handler function.\n     *\n     * @param {string} event Event name.\n     * @param {function} callback Callback.\n     */\n    on(event, callback) {\n        if (!(this.events[event] instanceof Array)) this.events[event] = [];\n        this.events[event].push(callback);\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Event name.\n     * @param {function} [callback] Callback.\n     */\n    off(event, callback) {\n        if (callback) {\n            this.events[event] = this.events[event].filter((f) => f !== callback);\n        } else {\n            this.events[event] = [];\n        }\n    }\n\n    /**\n     * Execute all handlers for the given event type.\n     *\n     * @param {string} event Event name.\n     * @param params Extra parameters.\n     */\n    trigger(event, ...params) {\n        if (!this.events[event]) return;\n        this.events[event].forEach((f) => f.call(this, this, ...params));\n    }\n}\n","import Base from './Base';\n\nexport default class Filler extends Base {\n    /**\n     * @typedef {Object} FillerOptions\n     * @property {string|HTMLElement|null} container Container element or selector.\n     * @property {string|HTMLElement|null} wrapper Inner element or selector.\n     * @property {string|null} itemSelector Items CSS selector.\n     * @property {string} [cloneClassName] Class name of the new clones.\n     * @property {boolean} [autoUpdate] Use ResizeObserver to auto update clones number.\n     * @property {boolean} [clonesOverflow] Create artificial overflow with clones.\n     * @property {boolean} [clonesFinish] Bring the cycle of clones to an end.\n     * @property {boolean} [clonesMin] Minimum number of clones.\n     */\n\n    /**\n     * Default options.\n     *\n     * @type {FillerOptions}\n     */\n    static defaultOptions = {\n        container: null,\n        wrapper: null,\n        itemSelector: null,\n        cloneClassName: '-clone',\n        autoUpdate: true,\n        clonesOverflow: false,\n        clonesFinish: false,\n        clonesMin: 0,\n    };\n\n    /**\n     * Create Filler instance.\n     *\n     * @param {FillerOptions} [options] Filler options.\n     */\n    constructor(options) {\n        super();\n\n        /** @type {FillerOptions} **/\n        this.options = {...Filler.defaultOptions, ...options};\n        this.container =\n            typeof this.options.container === 'string'\n                ? document.querySelector(this.options.container)\n                : this.options.container;\n        this.wrapper =\n            typeof this.options.wrapper === 'string'\n                ? this.container.querySelector(this.options.wrapper)\n                : this.options.wrapper || this.options.container;\n\n        /** @type Array.<HTMLElement> **/\n        this.item = [];\n        this.refresh(false);\n\n        if (this.options.autoUpdate) {\n            this.bindResizeObserver();\n        } else {\n            this.update();\n        }\n    }\n\n    /**\n     * Bind ResizeObserver to container for auto update.\n     */\n    bindResizeObserver() {\n        this.resizeObserver = new ResizeObserver(() => {\n            this.update();\n        });\n        this.resizeObserver.observe(this.container);\n    }\n\n    /**\n     * Creates and adds clones to end in the desired number from given offset.\n     *\n     * @param {number} [count] Number of clones to add.\n     * @param {number} [offset] Offset from start.\n     */\n    addClones(count, offset = 0) {\n        const clones = [];\n\n        for (let i = 0; i < count; i++) {\n            const item = this.item[(offset + i) % this.item.length].cloneNode(true);\n            item.classList.add(this.options.cloneClassName);\n            clones.push(item);\n        }\n\n        this.wrapper.append(...clones);\n    }\n\n    /**\n     * Removes the desired number of clones from the end.\n     *\n     * @param {number} [count] Number of clones to remove.\n     */\n    removeClones(count = 0) {\n        const clones = Array.from(this.wrapper.getElementsByClassName(this.options.cloneClassName));\n        clones.slice(-count).forEach((el) => el.remove());\n    }\n\n    /**\n     *  Sets the desired number of clones.\n     *\n     * @param {number} [count] Number of clones.\n     */\n    setClonesCount(count) {\n        if (this.clonesCount === count) return;\n        if (this.clonesCount < count) this.addClones(count - this.clonesCount, this.clonesCount);\n        if (this.clonesCount > count) this.removeClones(this.clonesCount - count);\n        this.clonesCount = count;\n    }\n\n    /**\n     * Get calculated data object.\n     *\n     * @return {Object} Calculated data.\n     */\n    getCalcData() {\n        const data = {\n            clonesCount: 0,\n            clonesWidth: 0,\n            containerWidth: this.container.offsetWidth,\n            fullWidth: 0,\n            itemWidth: [],\n            itemsWidth: 0,\n            lastIndex: 0,\n        };\n\n        this.item.map((el) => {\n            const style = window.getComputedStyle(el);\n            const width = el.offsetWidth + parseInt(style.marginLeft) + parseInt(style.marginRight);\n            data.itemWidth.push(width);\n            data.itemsWidth += width;\n        });\n\n        const itemLength = data.itemWidth.length;\n        const width = this.options.clonesOverflow ? data.containerWidth : data.containerWidth - data.itemsWidth;\n\n        while (\n            width > data.clonesWidth ||\n            data.clonesCount < this.options.clonesMin ||\n            (this.options.clonesFinish && data.clonesCount % itemLength > 0)\n        ) {\n            data.lastIndex = data.clonesCount % itemLength;\n            data.clonesWidth += data.itemWidth[data.lastIndex];\n            data.clonesCount++;\n        }\n\n        data.fullWidth = data.clonesWidth + data.itemsWidth;\n\n        return data;\n    }\n\n    /**\n     * Calculates and sets the number of clones.\n     */\n    update() {\n        this.calcData = this.getCalcData();\n        this.setClonesCount(this.calcData.clonesCount);\n        this.trigger('update', this.calcData);\n    }\n\n    /**\n     * Fully refresh and update all clones.\n     *\n     * @param {boolean} [update] Update after refresh.\n     */\n    refresh(update = true) {\n        this.removeClones();\n        this.item = Array.from(this.container.querySelectorAll(this.options.itemSelector));\n        this.calcData = {};\n        this.clonesCount = 0;\n        this.trigger('refresh');\n        if (update) this.update();\n    }\n\n    /**\n     * Destroy Reeller instance.\n     *\n     * @param {boolean} [removeClones] Remove clones from DOM.\n     */\n    destroy(removeClones = false) {\n        if (removeClones) this.removeClones();\n        if (this.resizeObserver) this.resizeObserver.disconnect();\n        this.trigger('destroy');\n    }\n}\n","/*!\n * Cuberto Reeller\n * https://github.com/Cuberto/reeller\n * https://cuberto.com/\n *\n * @version 0.0.5\n * @license The MIT License (MIT)\n * @author Cuberto, Artem Dordzhiev (Draft)\n */\n\nimport Base from './Base';\nimport Filler from './Filler';\n\nexport default class Reeller extends Base {\n    /**\n     * @typedef {Object} ReellerOptions\n     * @property {string|HTMLElement|null} container Container element or selector.\n     * @property {string|HTMLElement|null} wrapper Inner element or selector.\n     * @property {string|null} itemSelector Items CSS selector.\n     * @property {string} [cloneClassName] Class name of the new clones.\n     * @property {number} [speed] Movement speed.\n     * @property {string} [ease] Timing function.\n     * @property {number} [initialSeek] Initial seek of timeline.\n     * @property {boolean} [loop] Loop movement.\n     * @property {boolean} [paused] Initialize in paused mode.\n     * @property {boolean} [reversed] Reverse mode.\n     * @property {boolean} [autoStop] Use IntersectionObserver to auto stop movement.\n     * @property {boolean} [autoUpdate] Use ResizeObserver to auto update clones number.\n     * @property {boolean} [clonesOverflow] Create artificial overflow with clones.\n     * @property {boolean} [clonesFinish] Bring the cycle of clones to an end.\n     * @property {boolean} [clonesMin] Minimum number of clones.\n     * @property {Object|null} [plugins] Options for plugins.\n     */\n\n    /**\n     * Default options.\n     *\n     * @type {ReellerOptions}\n     */\n    static defaultOptions = {\n        container: null,\n        wrapper: null,\n        itemSelector: null,\n        cloneClassName: '-clone',\n        speed: 10,\n        ease: 'none',\n        initialSeek: 10,\n        loop: true,\n        paused: true,\n        reversed: false,\n        autoStop: true,\n        autoUpdate: true,\n        clonesOverflow: true,\n        clonesFinish: false,\n        clonesMin: 0,\n        plugins: null,\n    };\n\n    /**\n     * Registered plugin storage.\n     *\n     * @type {Object}\n     */\n    static plugins = {};\n\n    /**\n     * Create Reeller instance.\n     *\n     * @param {ReellerOptions} [options] Reeller options.\n     */\n    constructor(options) {\n        super();\n\n        /** @type {ReellerOptions} **/\n        this.options = {...Reeller.defaultOptions, ...options};\n        this.gsap = Reeller.gsap || window.gsap;\n        this.paused = this.options.paused;\n\n        this.createFiller();\n        this.createTimeline();\n        if (this.options.autoStop) this.bindIntersectionObserver();\n        if (this.options.plugins) this.initPlugins();\n    }\n\n    /**\n     * Register GSAP animation library.\n     *\n     * @param {GSAP} gsap GSAP library.\n     */\n    static registerGSAP(gsap) {\n        Reeller.gsap = gsap;\n    }\n\n    /**\n     * Register plugins.\n     */\n    static use(...plugins) {\n        plugins.forEach((plugin) => {\n            const name = plugin.pluginName;\n            if (typeof name !== 'string') throw new TypeError('Invalid plugin. Name is required.');\n            Reeller.plugins[name] = plugin;\n        });\n    }\n\n    /**\n     * Create filler.\n     */\n    createFiller() {\n        this.filler = new Filler(this.options);\n\n        this.filler.on('update', (filler, calcData) => {\n            this.invalidate();\n            this.trigger('update', calcData);\n        });\n\n        this.filler.on('refresh', () => {\n            this.trigger('refresh');\n        });\n    }\n\n    /**\n     * Create timeline.\n     */\n    createTimeline() {\n        this.tl = new this.gsap.timeline({\n            paused: this.options.paused,\n            reversed: this.options.reversed,\n            repeat: -1,\n            yoyo: !this.options.loop,\n            onReverseComplete: function () {\n                this.progress(1);\n            },\n        });\n\n        this.gsap.set(this.filler.container, {overflow: 'hidden'});\n\n        this.tl.fromTo(\n            this.filler.wrapper,\n            {\n                x: () => {\n                    if (!this.options.clonesOverflow) {\n                        return -(this.filler.calcData.fullWidth - this.filler.calcData.containerWidth);\n                    }\n                    return -this.filler.calcData.itemsWidth;\n                },\n            },\n            {\n                x: 0,\n                duration: this.options.speed,\n                ease: this.options.ease,\n            },\n        );\n\n        this.tl.seek(this.options.seek);\n\n        return this.tl;\n    }\n\n    /**\n     * Bind IntersectionObserver to container for autoplay.\n     */\n    bindIntersectionObserver() {\n        this.intersectionObserver = new IntersectionObserver((entries) => {\n            if (entries[0].isIntersecting) {\n                this.resume();\n            } else {\n                this.pause();\n            }\n        });\n        this.intersectionObserver.observe(this.filler.container);\n    }\n\n    /**\n     * Init plugins from options.\n     */\n    initPlugins() {\n        this.plugin = {};\n        for (const [name, options] of Object.entries(this.options.plugins)) {\n            const factory = Reeller.plugins[name];\n            if (factory) {\n                this.plugin[name] = new factory(this, options);\n            } else {\n                console.error(`Plugin ${name} not found. Make sure you register it with Reeller.use()`);\n            }\n        }\n    }\n\n    /**\n     * Destroy initialized plugins.\n     */\n    destroyPlugins() {\n        for (const instance of Object.values(this.plugin)) {\n            if (instance.destroy) instance.destroy();\n        }\n    }\n\n    /**\n     * Resume moving.\n     */\n    resume() {\n        this.gsap.set(this.filler.container, {z: '0'});\n        this.gsap.set(this.filler.wrapper, {willChange: 'transform'});\n        this.paused = false;\n        this.tl.resume();\n        this.trigger('resume');\n    }\n\n    /**\n     * Set reversed moving.\n     *\n     * @param {boolean} [reversed] Is movement reversed?\n     */\n    reverse(reversed = true) {\n        this.tl.reversed(reversed);\n        this.resume();\n        this.trigger('reverse', reversed);\n    }\n\n    /**\n     * Pause moving.\n     */\n    pause() {\n        this.gsap.set(this.filler.container, {clearProps: 'z'});\n        this.gsap.set(this.filler.wrapper, {willChange: 'auto'});\n        this.paused = true;\n        this.tl.pause();\n        this.trigger('pause');\n    }\n\n    /**\n     * Refresh timeline.\n     */\n    invalidate() {\n        this.tl.invalidate();\n        this.trigger('invalidate');\n    }\n\n    /**\n     * Recalculate data.\n     */\n    update() {\n        this.filler.update();\n    }\n\n    /**\n     * Fully refresh and update all clones and position.\n     *\n     * @param {boolean} [update] Update after refresh.\n     */\n    refresh(update = true) {\n        this.filler.refresh(update);\n    }\n\n    /**\n     * Destroy Reeller instance.\n     *\n     * @param {boolean} [removeClones] Remove clones from DOM.\n     * @param {boolean} [clearProps] Remove transformations.\n     */\n    destroy(removeClones = false, clearProps = false) {\n        if (this.intersectionObserver) this.intersectionObserver.disconnect();\n        if (this.options.plugins) this.destroyPlugins();\n        this.tl.kill();\n        this.filler.destroy(removeClones);\n        if (clearProps) {\n            this.gsap.set(this.filler.container, {clearProps: 'overflow'});\n            this.gsap.set(this.filler.wrapper, {clearProps: 'x,willChange'});\n        }\n        this.trigger('destroy');\n    }\n}\n","export default class ScrollerPlugin {\n    /**\n     * @typedef {Object} ScrollerPluginOptions\n     * @property {number} [speed] Movement and inertia speed.\n     * @property {number} [multiplier] Movement multiplier.\n     * @property {number} [threshold] Movement threshold.\n     * @property {string} [ease] Timing function.\n     * @property {boolean} [overwrite] GSAP overwrite mode.\n     * @property {boolean} [bothDirection] Allow movement in both directions.\n     * @property {boolean} [reversed] Reverse scroll movement.\n     * @property {boolean} [stopOnEnd] Use IntersectionObserver to auto stop movement.\n     * @property {function} [scrollProxy] Use ResizeObserver to auto update clones number.\n     */\n\n    /**\n     * Plugin name.\n     *\n     * @type {string}\n     */\n    static pluginName = 'scroller';\n\n    /**\n     * Default options.\n     *\n     * @type {ScrollerPluginOptions}\n     */\n    static defaultOptions = {\n        speed: 1,\n        multiplier: 0.5,\n        threshold: 1,\n        ease: 'expo.out',\n        overwrite: true,\n        bothDirection: true,\n        reversed: false,\n        stopOnEnd: false,\n        scrollProxy: null,\n    };\n\n    /**\n     * Reeller ScrollerPlugin.\n     *\n     * @param {Reeller} reeller Reeller instance.\n     * @param {object} options Options\n     */\n    constructor(reeller, options) {\n        /** @type {ScrollerPluginOptions} **/\n        this.options = {...ScrollerPlugin.defaultOptions, ...options};\n        this.reeller = reeller;\n        this.gsap = this.reeller.gsap;\n        this.tl = this.reeller.tl;\n\n        this.init();\n    }\n\n    /**\n     * Return scroll position.\n     *\n     * @return {number} Scroll position.\n     */\n    getScrollPos() {\n        if (this.options.scrollProxy) return this.options.scrollProxy();\n        return window.pageYOffset;\n    }\n\n    /**\n     * Initialize plugin.\n     */\n    init() {\n        let lastScrollPos = this.getScrollPos();\n        let lastDirection = 1;\n        let reachedEnd = true;\n\n        this.tickerFn = () => {\n            const scrollPos = this.getScrollPos();\n            let velocity = scrollPos - lastScrollPos;\n\n            if (!this.options.bothDirection) {\n                velocity = Math.abs(velocity);\n            }\n\n            if (this.options.reversed) {\n                velocity *= -1;\n            }\n\n            if (this.reeller.paused) {\n                lastDirection = Math.sign(velocity);\n                lastScrollPos = scrollPos;\n                if (!reachedEnd) {\n                    this.gsap.killTweensOf(this.tl);\n                    reachedEnd = true;\n                }\n                this.tl.timeScale(lastDirection * this.options.threshold);\n                return;\n            }\n\n            if (velocity) {\n                const delta = velocity * this.options.multiplier;\n                const timeScale =\n                    delta > 0 ? Math.max(this.options.threshold, delta) : Math.min(-this.options.threshold, delta);\n\n                this.tween = this.gsap.to(this.tl, {\n                    timeScale: timeScale,\n                    duration: this.options.speed,\n                    ease: this.options.ease,\n                    overwrite: this.options.overwrite,\n                });\n\n                reachedEnd = false;\n            } else {\n                if (!reachedEnd) {\n                    const timeScale = this.options.stopOnEnd ? 0 : lastDirection * this.options.threshold;\n\n                    this.gsap.killTweensOf(this.tl);\n                    this.tween = this.gsap.to(this.tl, {\n                        timeScale: timeScale,\n                        duration: this.options.speed,\n                        overwrite: this.options.overwrite,\n                        ease: this.options.ease,\n                    });\n                    reachedEnd = true;\n                }\n            }\n\n            lastDirection = Math.sign(velocity);\n            lastScrollPos = scrollPos;\n        };\n        this.gsap.ticker.add(this.tickerFn);\n    }\n\n    /**\n     * Destroy plugin.\n     */\n    destroy() {\n        if (this.tickerFn) {\n            this.gsap.ticker.remove(this.tickerFn);\n            this.tickerFn = null;\n        }\n        if (this.tween) this.tween.kill();\n    }\n}\n"],"names":["Base","this","events","on","event","callback","Array","push","off","filter","f","trigger","forEach","call","_this","concat","slice","_arguments","Filler","_Base","options","defaultOptions","container","document","querySelector","wrapper","item","refresh","autoUpdate","bindResizeObserver","update","_inheritsLoose","resizeObserver","ResizeObserver","_this2","observe","addClones","count","offset","clones","i","length","cloneNode","classList","add","cloneClassName","_this$wrapper","append","removeClones","from","getElementsByClassName","el","remove","setClonesCount","clonesCount","getCalcData","data","clonesWidth","containerWidth","offsetWidth","fullWidth","itemWidth","itemsWidth","lastIndex","map","style","window","getComputedStyle","width","parseInt","marginLeft","marginRight","itemLength","clonesOverflow","clonesMin","clonesFinish","calcData","querySelectorAll","itemSelector","destroy","disconnect","Reeller","_extends","gsap","paused","createFiller","createTimeline","autoStop","bindIntersectionObserver","plugins","initPlugins","registerGSAP","use","plugin","name","pluginName","TypeError","filler","invalidate","_this3","tl","timeline","reversed","repeat","yoyo","loop","onReverseComplete","progress","set","overflow","fromTo","x","duration","speed","ease","seek","_this4","intersectionObserver","IntersectionObserver","entries","isIntersecting","resume","pause","Object","_i","_Object$entries","factory","console","error","destroyPlugins","_i2","_Object$values","values","instance","z","willChange","reverse","clearProps","kill","initialSeek","ScrollerPlugin","reeller","init","getScrollPos","scrollProxy","pageYOffset","lastScrollPos","lastDirection","reachedEnd","tickerFn","scrollPos","velocity","bothDirection","Math","abs","sign","killTweensOf","timeScale","threshold","delta","multiplier","max","min","tween","to","overwrite","stopOnEnd","ticker"],"mappings":"smBAAqBA,IAAAA,0BAIjB,SAAcA,IACVC,KAAKC,OAAS,8BASlBC,GAAA,SAAGC,EAAOC,GACAJ,KAAKC,OAAOE,aAAkBE,QAAQL,KAAKC,OAAOE,GAAS,IACjEH,KAAKC,OAAOE,GAAOG,KAAKF,MAS5BG,IAAA,SAAIJ,EAAOC,GAEHJ,KAAKC,OAAOE,GADZC,EACqBJ,KAAKC,OAAOE,GAAOK,OAAO,SAACC,GAAD,OAAOA,IAAML,IAEvC,IAU7BM,EAAAA,QAAA,SAAQP,0BACCH,KAAKC,OAAOE,IACjBH,KAAKC,OAAOE,GAAOQ,QAAQ,SAACF,GAAD,OAAOA,EAAEG,KAAFH,MAAAA,EAAO,CAAAI,EAAMA,GAApBC,OAAA,GAAAC,MAAAH,KAAAI,EAAA,aCvCdC,eAkCjB,SAAAC,GAAA,SAAAD,EAAYE,GAAS,IAAAN,EAAA,OACjBA,sBAGKM,aAAcF,EAAOG,eAAmBD,GAC7CN,EAAKQ,UACiC,mBAAtBF,QAAQE,UACdC,SAASC,cAAcV,EAAKM,QAAQE,WACpCR,EAAKM,QAAQE,UACvBR,EAAKW,QAC+B,iBAAzBX,EAAKM,QAAQK,QACdX,EAAKQ,UAAUE,cAAcV,EAAKM,QAAQK,SAC1CX,EAAKM,QAAQK,SAAWX,EAAKM,QAAQE,UAG/CR,EAAKY,KAAO,GACZZ,EAAKa,SAAQ,GAETb,EAAKM,QAAQQ,WACbd,EAAKe,qBAELf,EAAKgB,WArBbC,EAAAb,EAAAC,8BA4BAU,mBAAA,sBACI5B,KAAK+B,eAAiB,IAAIC,eAAe,WACrCC,EAAKJ,WAET7B,KAAK+B,eAAeG,QAAQlC,KAAKqB,cASrCc,UAAA,SAAUC,EAAOC,GAAAA,IAAAA,OAAAA,IAAAA,IAAAA,EAAS,GAGtB,IAFA,IAAMC,EAAS,GAENC,EAAI,EAAGA,EAAIH,EAAOG,IAAK,CAC5B,IAAMd,EAAOzB,KAAKyB,MAAMY,EAASE,GAAKvC,KAAKyB,KAAKe,QAAQC,WAAU,GAClEhB,EAAKiB,UAAUC,IAAI3C,KAAKmB,QAAQyB,gBAChCN,EAAOhC,KAAKmB,IAGhBoB,EAAA7C,KAAKwB,SAAQsB,eAAUR,IAQ3BS,EAAAA,aAAA,SAAaX,QAAAA,IAAAA,IAAAA,EAAQ,GACF/B,MAAM2C,KAAKhD,KAAKwB,QAAQyB,uBAAuBjD,KAAKmB,QAAQyB,iBACpE7B,OAAOqB,GAAOzB,QAAQ,SAACuC,GAAD,OAAQA,EAAGC,cAQ5CC,eAAA,SAAehB,GACPpC,KAAKqD,cAAgBjB,IACrBpC,KAAKqD,YAAcjB,GAAOpC,KAAKmC,UAAUC,EAAQpC,KAAKqD,YAAarD,KAAKqD,aACxErD,KAAKqD,YAAcjB,GAAOpC,KAAK+C,aAAa/C,KAAKqD,YAAcjB,GACnEpC,KAAKqD,YAAcjB,IAQvBkB,EAAAA,YAAA,WACI,IAAMC,EAAO,CACTF,YAAa,EACbG,YAAa,EACbC,eAAgBzD,KAAKqB,UAAUqC,YAC/BC,UAAW,EACXC,UAAW,GACXC,WAAY,EACZC,UAAW,GAGf9D,KAAKyB,KAAKsC,IAAI,SAACb,GACX,IAAMc,EAAQC,OAAOC,iBAAiBhB,GAChCiB,EAAQjB,EAAGQ,YAAcU,SAASJ,EAAMK,YAAcD,SAASJ,EAAMM,aAC3Ef,EAAKK,UAAUtD,KAAK6D,GACpBZ,EAAKM,YAAcM,IAMvB,IAHA,IAAMI,EAAahB,EAAKK,UAAUpB,OAC5B2B,EAAQnE,KAAKmB,QAAQqD,eAAiBjB,EAAKE,eAAiBF,EAAKE,eAAiBF,EAAKM,WAGzFM,EAAQZ,EAAKC,aACbD,EAAKF,YAAcrD,KAAKmB,QAAQsD,WAC/BzE,KAAKmB,QAAQuD,cAAgBnB,EAAKF,YAAckB,EAAa,GAE9DhB,EAAKO,UAAYP,EAAKF,YAAckB,EACpChB,EAAKC,aAAeD,EAAKK,UAAUL,EAAKO,WACxCP,EAAKF,cAKT,OAFAE,EAAKI,UAAYJ,EAAKC,YAAcD,EAAKM,WAElCN,KAMX1B,OAAA,WACI7B,KAAK2E,SAAW3E,KAAKsD,cACrBtD,KAAKoD,eAAepD,KAAK2E,SAAStB,aAClCrD,KAAKU,QAAQ,SAAUV,KAAK2E,aAQhCjD,QAAA,SAAQG,YAAAA,IAAAA,GAAS,GACb7B,KAAK+C,eACL/C,KAAKyB,KAAOpB,MAAM2C,KAAKhD,KAAKqB,UAAUuD,iBAAiB5E,KAAKmB,QAAQ0D,eACpE7E,KAAK2E,SAAW,GAChB3E,KAAKqD,YAAc,EACnBrD,KAAKU,QAAQ,WACTmB,GAAQ7B,KAAK6B,UAQrBiD,EAAAA,QAAA,SAAQ/B,YAAAA,IAAAA,GAAe,GACfA,GAAc/C,KAAK+C,eACnB/C,KAAK+B,gBAAgB/B,KAAK+B,eAAegD,aAC7C/E,KAAKU,QAAQ,cAnJjB,CAlCgCX,GAAfkB,EAkBVG,eAAiB,CACpBC,UAAW,KACXG,QAAS,KACTqD,aAAc,KACdjC,eAAgB,SAChBjB,YAAY,EACZ6C,gBAAgB,EAChBE,cAAc,EACdD,UAAW,GCfEO,IAAAA,eAyDjB,SAAA9D,GAAA,SAAA8D,EAAY7D,SAAS,OACjBN,EAGAK,EAAAN,KAAAZ,OAAAA,MAAKmB,QAAL8D,EAAA,GAAmBD,EAAQ5D,eAAmBD,GAC9CN,EAAKqE,KAAOF,EAAQE,MAAQjB,OAAOiB,KACnCrE,EAAKsE,OAAStE,EAAKM,QAAQgE,OAE3BtE,EAAKuE,eACLvE,EAAKwE,iBACDxE,EAAKM,QAAQmE,UAAUzE,EAAK0E,2BAC5B1E,EAAKM,QAAQqE,SAAS3E,EAAK4E,gBAXnC3D,EAAAkD,EAAA9D,KAmBOwE,aAAP,SAAoBR,GAChBF,EAAQE,KAAOA,KAMZS,IAAP,WACI,yBAAQhF,QAAQ,SAACiF,GACb,IAAMC,EAAOD,EAAOE,WACpB,GAAoB,iBAATD,EAAmB,MAAUE,IAAAA,UAAU,qCAClDf,EAAQQ,QAAQK,GAAQD,gCAOhCR,aAAA,sBACIpF,KAAKgG,OAAS,IAAI/E,EAAOjB,KAAKmB,SAE9BnB,KAAKgG,OAAO9F,GAAG,SAAU,SAAC8F,EAAQrB,GAC9B1C,EAAKgE,aACLhE,EAAKvB,QAAQ,SAAUiE,KAG3B3E,KAAKgG,OAAO9F,GAAG,UAAW,WACtB+B,EAAKvB,QAAQ,gBAOrB2E,eAAA,WAAiB,IAAAa,EAAAlG,KAgCb,OA/BAA,KAAKmG,GAAK,IAAInG,KAAKkF,KAAKkB,SAAS,CAC7BjB,OAAQnF,KAAKmB,QAAQgE,OACrBkB,SAAUrG,KAAKmB,QAAQkF,SACvBC,QAAS,EACTC,MAAOvG,KAAKmB,QAAQqF,KACpBC,kBAAmB,WACfzG,KAAK0G,SAAS,MAItB1G,KAAKkF,KAAKyB,IAAI3G,KAAKgG,OAAO3E,UAAW,CAACuF,SAAU,WAEhD5G,KAAKmG,GAAGU,OACJ7G,KAAKgG,OAAOxE,QACZ,CACIsF,EAAG,WACC,OAAKZ,EAAK/E,QAAQqD,gBAGV0B,EAAKF,OAAOrB,SAASd,aAFhBqC,EAAKF,OAAOrB,SAAShB,UAAYuC,EAAKF,OAAOrB,SAASlB,kBAK3E,CACIqD,EAAG,EACHC,SAAU/G,KAAKmB,QAAQ6F,MACvBC,KAAMjH,KAAKmB,QAAQ8F,OAI3BjH,KAAKmG,GAAGe,KAAKlH,KAAKmB,QAAQ+F,MAEdf,KAAAA,IAMhBZ,EAAAA,yBAAA,WAA2B,IAAA4B,EAAAnH,KACvBA,KAAKoH,qBAAuB,IAAIC,qBAAqB,SAACC,GAC9CA,EAAQ,GAAGC,eACXJ,EAAKK,SAELL,EAAKM,UAGbzH,KAAKoH,qBAAqBlF,QAAQlC,KAAKgG,OAAO3E,YAMlDoE,EAAAA,YAAA,WACIzF,KAAK4F,OAAS,GACd,IAA8B8B,IAAAA,EAAAA,EAAAA,EAAAA,OAAOJ,QAAQtH,KAAKmB,QAAQqE,SAAUmC,EAAAC,EAAApF,OAAAmF,IAAA,CAA/D,IAAO9B,EAAAA,EAAAA,GAAAA,EAAM1E,EAAAA,GACR0G,EAAU7C,EAAQQ,QAAQK,GAC5BgC,EACA7H,KAAK4F,OAAOC,GAAQ,IAAIgC,EAAQ7H,WAEhC8H,QAAQC,MAAR,UAAwBlC,EAAxB,8DAQZmC,EAAAA,eAAA,WACI,IAAA,IAAAC,EAAA,EAAAC,EAAuBR,OAAOS,OAAOnI,KAAK4F,uBAAS,CAA9C,IAAMwC,EAAQF,EAAAD,GACXG,EAAStD,SAASsD,EAAStD,YAOvC0C,EAAAA,OAAA,WACIxH,KAAKkF,KAAKyB,IAAI3G,KAAKgG,OAAO3E,UAAW,CAACgH,EAAG,MACzCrI,KAAKkF,KAAKyB,IAAI3G,KAAKgG,OAAOxE,QAAS,CAAC8G,WAAY,cAChDtI,KAAKmF,QAAS,EACdnF,KAAKmG,GAAGqB,SACRxH,KAAKU,QAAQ,aAQjB6H,QAAA,SAAQlC,QAAAA,IAAAA,IAAAA,GAAW,GACfrG,KAAKmG,GAAGE,SAASA,GACjBrG,KAAKwH,SACLxH,KAAKU,QAAQ,UAAW2F,IAM5BoB,EAAAA,MAAA,WACIzH,KAAKkF,KAAKyB,IAAI3G,KAAKgG,OAAO3E,UAAW,CAACmH,WAAY,MAClDxI,KAAKkF,KAAKyB,IAAI3G,KAAKgG,OAAOxE,QAAS,CAAC8G,WAAY,SAChDtI,KAAKmF,QAAS,EACdnF,KAAKmG,GAAGsB,QACRzH,KAAKU,QAAQ,YAMjBuF,WAAA,WACIjG,KAAKmG,GAAGF,aACRjG,KAAKU,QAAQ,eAMjBmB,EAAAA,OAAA,WACI7B,KAAKgG,OAAOnE,YAQhBH,QAAA,SAAQG,QAAAA,IAAAA,IAAAA,GAAS,GACb7B,KAAKgG,OAAOtE,QAAQG,IASxBiD,EAAAA,QAAA,SAAQ/B,EAAsByF,QAAoB,IAA1CzF,IAAAA,GAAe,YAAOyF,IAAAA,GAAa,GACnCxI,KAAKoH,sBAAsBpH,KAAKoH,qBAAqBrC,aACrD/E,KAAKmB,QAAQqE,SAASxF,KAAKgI,iBAC/BhI,KAAKmG,GAAGsC,OACRzI,KAAKgG,OAAOlB,QAAQ/B,GAChByF,IACAxI,KAAKkF,KAAKyB,IAAI3G,KAAKgG,OAAO3E,UAAW,CAACmH,WAAY,aAClDxI,KAAKkF,KAAKyB,IAAI3G,KAAKgG,OAAOxE,QAAS,CAACgH,WAAY,kBAEpDxI,KAAKU,QAAQ,cAtMjB,CAzDiCX,GAAhBiF,EA0BV5D,eAAiB,CACpBC,UAAW,KACXG,QAAS,KACTqD,aAAc,KACdjC,eAAgB,SAChBoE,MAAO,GACPC,KAAM,OACNyB,YAAa,GACblC,MAAM,EACNrB,QAAQ,EACRkB,UAAU,EACVf,UAAU,EACV3D,YAAY,EACZ6C,gBAAgB,EAChBE,cAAc,EACdD,UAAW,EACXe,QAAS,MA1CIR,EAkDVQ,QAAU,GC/DAmD,IAAAA,eA4CjB,WAAA,SAAAA,EAAYC,EAASzH,GAEjBnB,KAAKmB,QAAL8D,EAAA,GAAmB0D,EAAevH,eAAmBD,GACrDnB,KAAK4I,QAAUA,EACf5I,KAAKkF,KAAOlF,KAAK4I,QAAQ1D,KACzBlF,KAAKmG,GAAKnG,KAAK4I,QAAQzC,GAEvBnG,KAAK6I,WAQTC,EAAAA,EAAAA,iBAAAA,EAAAA,aAAA,WACI,OAAI9I,KAAKmB,QAAQ4H,YAAyB5H,KAAAA,QAAQ4H,cAC3C9E,OAAO+E,eAMlBH,KAAA,WAAO,IAAAhI,EAAAb,KACCiJ,EAAgBjJ,KAAK8I,eACrBI,EAAgB,EAChBC,GAAa,EAEjBnJ,KAAKoJ,SAAW,WACZ,IAAMC,EAAYxI,EAAKiI,eACnBQ,EAAWD,EAAYJ,EAU3B,GARKpI,EAAKM,QAAQoI,gBACdD,EAAWE,KAAKC,IAAIH,IAGpBzI,EAAKM,QAAQkF,WACbiD,IAAa,GAGbzI,EAAK+H,QAAQzD,OAQb,OAPA+D,EAAgBM,KAAKE,KAAKJ,GAC1BL,EAAgBI,EACXF,IACDtI,EAAKqE,KAAKyE,aAAa9I,EAAKsF,IAC5BgD,GAAa,QAEjBtI,EAAKsF,GAAGyD,UAAUV,EAAgBrI,EAAKM,QAAQ0I,WAInD,GAAIP,EAAU,CACV,IAAMQ,EAAQR,EAAWzI,EAAKM,QAAQ4I,WAChCH,EACFE,EAAQ,EAAIN,KAAKQ,IAAInJ,EAAKM,QAAQ0I,UAAWC,GAASN,KAAKS,KAAKpJ,EAAKM,QAAQ0I,UAAWC,GAE5FjJ,EAAKqJ,MAAQrJ,EAAKqE,KAAKiF,GAAGtJ,EAAKsF,GAAI,CAC/ByD,UAAWA,EACX7C,SAAUlG,EAAKM,QAAQ6F,MACvBC,KAAMpG,EAAKM,QAAQ8F,KACnBmD,UAAWvJ,EAAKM,QAAQiJ,YAG5BjB,GAAa,OAEb,IAAKA,EAAY,CACb,IAAMS,EAAY/I,EAAKM,QAAQkJ,UAAY,EAAInB,EAAgBrI,EAAKM,QAAQ0I,UAE5EhJ,EAAKqE,KAAKyE,aAAa9I,EAAKsF,IAC5BtF,EAAKqJ,MAAQrJ,EAAKqE,KAAKiF,GAAGtJ,EAAKsF,GAAI,CAC/ByD,UAAWA,EACX7C,SAAUlG,EAAKM,QAAQ6F,MACvBoD,UAAWvJ,EAAKM,QAAQiJ,UACxBnD,KAAMpG,EAAKM,QAAQ8F,OAEvBkC,GAAa,EAIrBD,EAAgBM,KAAKE,KAAKJ,GAC1BL,EAAgBI,GAEpBrJ,KAAKkF,KAAKoF,OAAO3H,IAAI3C,KAAKoJ,aAM9BtE,QAAA,WACQ9E,KAAKoJ,WACLpJ,KAAKkF,KAAKoF,OAAOnH,OAAOnD,KAAKoJ,UAC7BpJ,KAAKoJ,SAAW,MAEhBpJ,KAAKkK,OAAOlK,KAAKkK,MAAMzB,UA7F/B,GA5CiBE,EAmBV7C,WAAa,WAnBH6C,EA0BVvH,eAAiB,CACpB4F,MAAO,EACP+C,WAAY,GACZF,UAAW,EACX5C,KAAM,WACNmD,WAAW,EACXb,eAAe,EACflD,UAAU,EACVgE,WAAW,EACXtB,YAAa"}